title: Cloudflare Tunnel
name: cloudflared
use_python: False

prepare_env: |-
  cd /tmp
  curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
  dpkg -i cloudflared.deb

start: |-
    if [[ $CF_TOKEN == "quick" ]]; then
        # Split EXPOSE_PORTS into an array using ':' as the delimiter
        IFS=':' read -ra names <<< "$PORT_MAPPING"
        IFS=':' read -ra ports <<< "$EXPOSE_PORTS"

        # Loop over the ports array
        paste <(printf '%s\n' "${names[@]}") <(printf '%s\n' "${ports[@]}") | while IFS=$'\t' read -r name port; do
            if [[ $port == "" ]]; then
                continue
            fi
            metrics_port=$((port+1))

            # Generate PID file and log file names using a different delimiter
            pidfile="/tmp/cloudflared_${name}.pid"
            logfile="$LOG_DIR/cloudflared_${name}.log"
            hostfile="/tmp/cloudflared_${name}.host"
            
            # Check if tunnel is already running
            if [[ -f $pidfile ]]; then
                if kill -0 "$(cat $pidfile)" 2>/dev/null; then
                    log "Cloudflared tunnel for $name is already running."
                    continue
                fi
            fi
            log "Starting cloudflared tunnel for $name"
            # Start cloudflared tunnel in the background
            nohup cloudflared tunnel --url http://localhost:${port} --metrics localhost:${metrics_port} --pidfile "$pidfile" > "$logfile" 2>&1 &

            # Wait for the tunnel to become available
            retries=0
            max_retries=10
            while true; do
                sleep 5
                response=$(curl -s http://localhost:${metrics_port}/quicktunnel || true)
                if [[ $? -eq 0 ]] && [[ "$(echo "$response" | jq -r '.hostname')" != "" ]]; then
                    hostname=$(echo "$response" | jq -r '.hostname')
                    echo $hostname > $hostfile
                    send_to_discord "Vist https://$hostname for $name"
                    break
                fi
                retries=$((retries+1))
                if [[ $retries -ge $max_retries ]]; then
                    log "Error: Failed to get response after $max_retries attempts"
                    send_to_discord "Cloudflared: Failed to get response after $max_retries attempts"
                    break
                fi
                echo "Failed to get response. Retrying in 5 seconds..."
                sleep 5
            done
        done
    else
        cloudflared service install "$CF_TOKEN"
        send_to_discord "Cloudflared: Running as a service"
    fi

custom_start: ""
custom_reload: |-
      # Kill all and restart is not a good idea, only start tunnel if it's not running
      bash main.sh
custom_stop: |-
      if [[ -n $2 ]]; then
          log "Stopping Cloudflare tunnel for $2"
          kill_pid /tmp/cloudflared_$2.pid
      else
        log "Stopping all Cloudflare tunnel(s)"
        for file in /tmp/cloudflared_*.pid; do
            kill_pid $file
        done
      fi

export_required_env: |-
    export REQUIRED_ENV="CF_TOKEN"
other_commands: ""